<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ltcxwf-gmail.github.io/"/>
  <updated>2016-09-07T07:39:22.000Z</updated>
  <id>https://ltcxwf-gmail.github.io/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring框架介绍</title>
    <link href="https://ltcxwf-gmail.github.io/2016/09/07/2016-7-7-Spring%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://ltcxwf-gmail.github.io/2016/09/07/2016-7-7-Spring框架介绍/</id>
    <published>2016-09-07T07:34:41.000Z</published>
    <updated>2016-09-07T07:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><a href="#I">Part I. Spring框架综述</a>  
</em><a href="#1">1. 开始学习Spring</a></p>
<p></p><h1 id="I">Part I. Spring框架综述</h1><br>&nbsp;&nbsp;&nbsp;&nbsp;Spring框架是一个轻量级的解决方案，对于构建一个企业级应用来说，Spring框架也是一种可能的一站式服务。Spring是模块化的，允许你仅使用你需要的那部分功能，而不必引入其它的部分。你可以在任何web框架上使用IoC容器，也可以只使用Hibernate集成代码或JDBC抽象层。Spring框架支持声明式的事务管理，支持通过RMI或web service来远程访问你的逻辑，并且支持多种持久化数据的方式。Spring提供一个全功能的MVC框架，使你能将AOP透明的集成到软件中。<br>&nbsp;&nbsp;&nbsp;&nbsp;Spring被设计为非侵入式的，这意味着你自己的逻辑代码通常情况下不依赖于框架本身。在你的集成层（例如数据访问层），将会存在一些数据访问技术的依赖和Spring的库。不管怎样，从你其余的代码中分离这些依赖应该是很容易的。<p></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这篇文档是Spring框架特性的参考手册。如果你有任何关于这篇文档的要求、评论或问题，请向用户邮寄列表中的人发邮件。关于框架本身的问题可以在StackOverflow上提问。</p>
<p></p><h2 id="1">1. 开始学习Spring</h2><br>&nbsp;&nbsp;&nbsp;&nbsp;这本参考手册提供了关于Spring框架的详细信息，它提供了关于所有特性的全面文档，也介绍了Spring中的基本概念（例如依赖注入）的一些背景。<p></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果你刚开始学习Spring，你可能想创建一个基于Spring Boot的应用，Spring Boot提供了一个快速（和武断的）方式来创建一个用于生产环境的基于Spring的应用。它是基于Spring框架的，<strong>支持约定大于配置</strong>，被设计为可以快速启动并且尽可能快的运行起来。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;你可以用start.spring.io 来生产一个基本的工程或遵循『Getting Started』指南中的一个，例如『Started Building a RESTful Web Service』指南。除了容易理解吸收之外，这些指南主要是基于任务的，它们中的大多数是基于Spring Boot的。它们也包含了Spring的其它工程，当解决一个特定问题时你可能会考虑它们。</p>
<ol>
<li>Spring框架介绍</li>
</ol>
<hr>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Spring框架是一个为支持开发Java应用提供全面基础架构的Java平台。Spring处理基础架构，因此你可以集中精力在你有应用上。<br>&nbsp;&nbsp;&nbsp;&nbsp;Spring使你能创建简单Java对象(POJO)并能非侵入式的将企业服务应用到简单Java对象(POJO)上。<br>&nbsp;&nbsp;&nbsp;&nbsp;作为一个应用开发者，下面是一些你能从Spring平台受益的例子：</p>
<ul>
<li>在一个数据库事务中执行一个Java方法而不必处理事务APIs</li>
<li>使一个本地的Java方法可以远程调用而不必处理远程APIs</li>
<li>使一个本地Java方法变为管理操作而不必处理JMX APIs</li>
<li>使一个本地Java方法变为消息处理器而不必处理JMS APIs</li>
</ul>
<h2 id="2-1-依赖注入和控制反转"><a href="#2-1-依赖注入和控制反转" class="headerlink" title="2.1 依赖注入和控制反转"></a>2.1 依赖注入和控制反转</h2>]]></content>
    
    <summary type="html">
    
      Spring框架Spring框架是一个轻量级的解决方案，对于构建一个企业级应用来说，Spring框架也是一种可能的一站式服务。Spring是模块化的，允许你仅使用你需要的那部分功能，而不必引入其它的部分。你可以在任何web框架上使用IoC容器，也可以只使用Hibernate集成代码或JDBC抽象层。
    
    </summary>
    
    
      <category term="Java" scheme="https://ltcxwf-gmail.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的集合转换(lambda表达式)</title>
    <link href="https://ltcxwf-gmail.github.io/2016/09/06/2016-9-6-Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E8%BD%AC%E6%8D%A2(lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F)/"/>
    <id>https://ltcxwf-gmail.github.io/2016/09/06/2016-9-6-Java中的集合转换(lambda表达式)/</id>
    <published>2016-09-06T03:36:42.000Z</published>
    <updated>2016-09-07T05:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Java应用中进行集合对象间的转换是非常常见的事情，有时候在处理某些任务时选择一种好的数据结构往往会起到事半功倍的作用，因此熟悉每种数据结构并知道其特点对于程序员来说是非常重要的，而只知道这些是不够的，有时候你需要一个Map来处理数据，而此时你手中只有一个List，此时知道如何将List转为Map就非常重要了，而只知道for循环将List转为Map这就太Low了，JDK1.8 吸收了许多函数式编程的思想，其中的lambda表达式不仅功能强大，而且减少了很多不必要的代码，本文不是介绍lambda表达式的，主要是利用lambda表达式进行Java中结合的转换，当然lambda表达式的使用往往离不开JDK1.8 的stream类，本文主要使用<strong><em>lambda表达式</em></strong>和<strong><em>stream类</em></strong>来实现Java中集合的转换，也会涉及到利用stream对数据进行的一些处理。 </p>
<h2 id="1-List-To-Map-lt-gt-Map-To-List"><a href="#1-List-To-Map-lt-gt-Map-To-List" class="headerlink" title="1.List To Map  &lt;==&gt; Map To List  "></a>1.List To Map  &lt;==&gt; Map To List  </h2><p>将List转换为Map是Java中的常见操作，例如我想知道某个对象是否已经在List中，此时就需要将List转成Map，你总不会打算for循环一个个比吧！  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span>   <span class="comment">//lombok提供的注解，会自动添加getter和setter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> String id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line">   <span class="keyword">private</span> String info;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">现在有一个所有学生信息的列表`List&lt;Student&gt; list`和一个要新添加的学生`Student studentNew`，在添加学生之前需要对新添加的学生信息`studentNew`进行判断是否已经在`list`中，学生的唯一标识是id，不考虑其他，就是单纯的用Java代码判断，此时就需要将List转为Map，代码如下：  </div><div class="line"></div><div class="line">```Java  </div><div class="line">Map&lt;String, Student&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getId, Function.identity()));</div><div class="line"><span class="keyword">if</span>(studentMap.containsKey(studentNew.getId())) &#123;</div><div class="line">   System.out.println(<span class="string">"studentNew in map!"</span>);</div><div class="line">&#125;</div><div class="line">```  </div><div class="line">将Map转为List就非常简单了:  </div><div class="line"></div><div class="line">```Java</div><div class="line">List&lt;Student&gt; listValues = <span class="keyword">new</span> ArrayList&lt;Student&gt;(studentMap.values()); <span class="comment">//map values</span></div><div class="line">List&lt;String&gt; listKeys = <span class="keyword">new</span> ArrayList&lt;String&gt;(studentMap.keySet()); <span class="comment">//map keys  </span></div><div class="line">```  </div><div class="line"></div><div class="line"><span class="number">2</span>.List To Set &amp;lt;==&amp;gt; Set To List  </div><div class="line">---  </div><div class="line">List与Set之间的转换就很容易了，Set To List：  </div><div class="line"></div><div class="line">```Java</div><div class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">set.add(<span class="string">"123"</span>);</div><div class="line">set.add(<span class="string">"456"</span>);</div><div class="line">List&lt;String&gt; setToList = <span class="keyword">new</span> ArrayList&lt;String&gt;(set); <span class="comment">//Set To List</span></div><div class="line">```  </div><div class="line">  </div><div class="line">List To Set:    </div><div class="line"></div><div class="line">```Java</div><div class="line">Set&lt;String&gt; listToSet = <span class="keyword">new</span> HashSet&lt;String&gt;(listSet);</div></pre></td></tr></table></figure>
<p>注：如果需要对List去重可以使用Set，这<code>List To Set + Set To List</code>两个操作可以将List中的重复元素去掉。这里用的是HashSet，如果需要一个有序的List，可以选择TreeSet，TreeSet需要实现对象的Comparable接口。  </p>
<h2 id="3-Array-To-List-lt-gt-List-To-Array"><a href="#3-Array-To-List-lt-gt-List-To-Array" class="headerlink" title="3.Array To List &lt;==&gt; List To Array  "></a>3.Array To List &lt;==&gt; List To Array  </h2><p>参考：<a href="http://noahsnail.com/blog/2016/09/02/Java%E4%B8%ADList%E4%B8%8EArray%E7%9A%84%E8%BD%AC%E6%8D%A2.html" target="_blank" rel="external">Java中List与Array的转换</a><br>注：对Array的许多操作都可以先将Array转为List，然后再进行需要的转换再进行处理，或转为List后使用Stream提供的操作来进行处理。  </p>
<h2 id="4-Map-To-Set-lt-gt-Set-To-Map"><a href="#4-Map-To-Set-lt-gt-Set-To-Map" class="headerlink" title="4.Map To Set  &lt;==&gt; Set To Map  "></a>4.Map To Set  &lt;==&gt; Set To Map  </h2><p>Map与Set之间的转换也比较简单，Map To Set：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; mapToSetKeys = <span class="keyword">new</span> HashSet&lt;String&gt;(studentMap.keySet()); <span class="comment">//map keys</span></div><div class="line">Set&lt;Student&gt; mapToSetValues = <span class="keyword">new</span> HashSet&lt;Student&gt;(studentMap.values()); <span class="comment">//map values</span></div><div class="line">```  </div><div class="line">Set To Map：  </div><div class="line"></div><div class="line">```Java</div><div class="line">Map&lt;String, Student&gt; setToMap = mapToSetValues.stream().collect(Collectors.toMap(Student::getId, Function.identity()));</div><div class="line">```  </div><div class="line"></div><div class="line"><span class="number">5</span>.List排序</div><div class="line">---</div><div class="line">要对List中的对象进行排序以前非常麻烦，什么对象实现Comparable接口啊，写一个StudentComparator实现Comparator接口呀，非常麻烦，现在非常简单一行代码搞定（两种方式）：  </div><div class="line"></div><div class="line">```Java</div><div class="line">list.sort(Comparator.comparing(Student::getName)); <span class="comment">//按名字排序</span></div><div class="line">list.sort((p1,p2) -&gt; &#123;</div><div class="line">   <span class="keyword">return</span> p1.getName().toLowerCase().compareTo(p2.getName().toLowerCase());</div><div class="line">&#125;);<span class="comment">//lambda表达式</span></div></pre></td></tr></table></figure>
<h2 id="6-stream中的filter功能"><a href="#6-stream中的filter功能" class="headerlink" title="6.stream中的filter功能  "></a>6.stream中的filter功能  </h2><p>filter功能主要是对集合中的元素进行过滤，以List为例，找出名字叫Jack的学生：  </p>
<pre><code class="Java">List&lt;Student&gt; filterResult = list.stream().filter(p -&gt; StringUtils.equals(p.getName(), <span class="string">"Jack"</span>)).collect(Collectors.toList());
filterResult.stream().forEach(p -&gt; {
   System.out.println(p.getName());
});
</code></pre>
<p>上面的代码使用了stream的filter函数和forEach函数，以后可以少写for循环遍历List了。filter的<code>-&gt;</code>后面需要返回一个boolean值。最好”Jack”写前面，习惯。<br>filter会对List中的每个元素进行处理。  </p>
<h2 id="7-stream中的map功能"><a href="#7-stream中的map功能" class="headerlink" title="7.stream中的map功能  "></a>7.stream中的map功能  </h2><p>给每个学生的名字后面加上个China:   </p>
<pre><code class="Java">List&lt;Student&gt; mapResult = list.stream().map(p -&gt; {
   p.setName(p.getName() + <span class="string">" China"</span>);
   <span class="keyword">return</span> p;
}).collect(Collectors.toList());
mapResult.stream().forEach(p -&gt; {
   System.out.println(p.getName());
});
</code></pre>
<p>map函数的主要功能是对List中的每个元素进行处理并返回，可以返回其它的数据类型，例如：  </p>
<pre><code class="Java">List&lt;String&gt; mapResult = list.stream().map(p -&gt; {
p.setName(p.getName() + <span class="string">" China"</span>);
   <span class="keyword">return</span> p.getName();
}).collect(Collectors.toList());
mapResult.stream().forEach(p -&gt; {
   System.out.println(p);
});
</code></pre>
<h2 id="8-filter和map结合起来用"><a href="#8-filter和map结合起来用" class="headerlink" title="8.filter和map结合起来用  "></a>8.filter和map结合起来用  </h2><p>找出名字为Jack的Student并在名字后面加上China：  </p>
<pre><code class="Java">List&lt;Student&gt; result = list.stream().filter(p -&gt; StringUtils.equals(<span class="string">"Jack"</span>, p.getName())).map(p -&gt; {
   p.setName(p.getName() + <span class="string">" China"</span>);
   <span class="keyword">return</span> p;
}).collect(Collectors.toList());
   result.stream().forEach(p -&gt; {
   System.out.println(p.getName());
});
</code></pre>
<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com" target="_blank" rel="external">noahsnail.com</a>  </p>
]]></content>
    
    <summary type="html">
    
      在Java应用中进行集合对象间的转换是非常常见的事情，有时候在处理某些任务时选择一种好的数据结构往往会起到事半功倍的作用，因此熟悉每种数据结构并知道其特点对于程序员来说是非常重要的
    
    </summary>
    
    
      <category term="Java" scheme="https://ltcxwf-gmail.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac下程序端口的查找及关闭</title>
    <link href="https://ltcxwf-gmail.github.io/2016/09/05/2016-9-5-Mac%E4%B8%8B%E8%A7%A3%E5%86%B3%E7%A8%8B%E5%BA%8F%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    <id>https://ltcxwf-gmail.github.io/2016/09/05/2016-9-5-Mac下解决程序端口占用/</id>
    <published>2016-09-05T01:55:00.000Z</published>
    <updated>2016-09-07T05:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;使用Mac开发经常会碰到端口被占用的问题，例如作者在使用Spring Boot开发应用时，在启动Application后，忘了关闭，又重启了一次Application，此时会报错误，而且由于重启Application，导致上一次的启动的Application找不到在哪关闭了，此时需要进入终端去查看8080端口对应的进程id，并根据id关闭对应的应用。<br>错误信息如下图所示：  </p>
<pre><code class="java"><span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.734</span> ERROR <span class="number">1681</span> --- [  restartedMain] o.a.coyote.http11.Http11NioProtocol      : Failed to start end point associated with ProtocolHandler [<span class="string">"http-nio-8080"</span>]

java.net.BindException: Address already in use
at sun.nio.ch.Net.bind0(Native Method) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.Net.bind(Net.java:<span class="number">433</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.Net.bind(Net.java:<span class="number">425</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:<span class="number">223</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:<span class="number">74</span>) ~[na:<span class="number">1.8</span>.0_91]
at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:<span class="number">340</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:<span class="number">773</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:<span class="number">473</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.connector.Connector.startInternal(Connector.java:<span class="number">986</span>) [tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="number">147</span>) [tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.core.StandardService.addConnector(StandardService.java:<span class="number">239</span>) [tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:<span class="number">194</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:<span class="number">151</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:<span class="number">293</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:<span class="number">141</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">541</span>) [spring-context-<span class="number">4.2</span>.6.RELEASE.jar:<span class="number">4.2</span>.6.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:<span class="number">118</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="number">766</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:<span class="number">361</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">307</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1191</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1180</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_91]
at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[na:<span class="number">1.8</span>.0_91]
at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:<span class="number">49</span>) [spring-boot-devtools-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]

<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.735</span> ERROR <span class="number">1681</span> --- [  restartedMain] o.apache.catalina.core.StandardService   : Failed to start connector [Connector[HTTP/<span class="number">1.1</span>-<span class="number">8080</span>]]

org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/<span class="number">1.1</span>-<span class="number">8080</span>]]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="number">153</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.core.StandardService.addConnector(StandardService.java:<span class="number">239</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:<span class="number">194</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:<span class="number">151</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:<span class="number">293</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:<span class="number">141</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">541</span>) [spring-context-<span class="number">4.2</span>.6.RELEASE.jar:<span class="number">4.2</span>.6.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:<span class="number">118</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="number">766</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:<span class="number">361</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">307</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1191</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1180</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_91]
at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[na:<span class="number">1.8</span>.0_91]
at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:<span class="number">49</span>) [spring-boot-devtools-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
Caused by: org.apache.catalina.LifecycleException: service.getName(): <span class="string">"Tomcat"</span>;  Protocol handler start failed
at org.apache.catalina.connector.Connector.startInternal(Connector.java:<span class="number">993</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="number">147</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
... <span class="number">18</span> common frames omitted
Caused by: java.net.BindException: Address already in use
at sun.nio.ch.Net.bind0(Native Method) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.Net.bind(Net.java:<span class="number">433</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.Net.bind(Net.java:<span class="number">425</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:<span class="number">223</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:<span class="number">74</span>) ~[na:<span class="number">1.8</span>.0_91]
at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:<span class="number">340</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:<span class="number">773</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:<span class="number">473</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
at org.apache.catalina.connector.Connector.startInternal(Connector.java:<span class="number">986</span>) ~[tomcat-embed-core-<span class="number">8.0</span>.33.jar:<span class="number">8.0</span>.33]
... <span class="number">19</span> common frames omitted

<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.743</span>  INFO <span class="number">1681</span> --- [  restartedMain] o.apache.catalina.core.StandardService   : Stopping service Tomcat
<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.745</span>  INFO <span class="number">1681</span> --- [ost-startStop-<span class="number">1</span>] com.nhncorp.iims2.filter.IIMS2Filter     : [IIMS2Filter] destroy()
<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.745</span>  INFO <span class="number">1681</span> --- [ost-startStop-<span class="number">1</span>] c.n.iims2.filter.IIMS2InitialFilter      : [IIMS2InitialFilter] destroy()
<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.764</span>  WARN <span class="number">1681</span> --- [ost-startStop-<span class="number">1</span>] o.a.c.loader.WebappClassLoaderBase       : The web application [ROOT] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.lang.Object.wait(Native Method)
 java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:<span class="number">143</span>)
 com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:<span class="number">43</span>)
<span class="number">2016</span>-<span class="number">09</span>-<span class="number">05</span> <span class="number">09</span>:<span class="number">06</span>:<span class="number">26.770</span> ERROR <span class="number">1681</span> --- [  restartedMain] o.s.boot.SpringApplication               : Application startup failed

org.springframework.boot.context.embedded.EmbeddedServletContainerException: Unable to start embedded Tomcat servlet container
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:<span class="number">165</span>) ~[spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:<span class="number">293</span>) ~[spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:<span class="number">141</span>) ~[spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">541</span>) ~[spring-context-<span class="number">4.2</span>.6.RELEASE.jar:<span class="number">4.2</span>.6.RELEASE]
at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:<span class="number">118</span>) ~[spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:<span class="number">766</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:<span class="number">361</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">307</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1191</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:<span class="number">1180</span>) [spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>) ~[na:<span class="number">1.8</span>.0_91]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>) ~[na:<span class="number">1.8</span>.0_91]
at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>) ~[na:<span class="number">1.8</span>.0_91]
at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:<span class="number">49</span>) [spring-boot-devtools-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
Caused by: java.lang.IllegalStateException: Tomcat connector in failed state
at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:<span class="number">159</span>) ~[spring-boot-<span class="number">1.3</span>.5.RELEASE.jar:<span class="number">1.3</span>.5.RELEASE]
... <span class="number">15</span> common frames omitted
</code></pre>
<p>上面的一堆异常信息只说明了一件事，8080端口被占用了，应用无法启动。因此需要在终端下查找使用8080端口的进程并将之关闭。<br>查找端口对应的进程信息的命令有多个，目前我觉的最好用的是lsof命令，查找进程并关闭如下图所示：  </p>
<p><img src="http://ocs628urt.bkt.clouddn.com/2016-09-05-3.png" alt="image"></p>
<p>解释：lsof全称list open files，在linux/Mac环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。<br>lsof -i，-i参数是列出所有符合条件的进程。其他lsof命令的相关信息可以参考<a href="http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html" target="_blank" rel="external">http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html</a>。<br>查找出进程后，如图可以查看进程的相关信息，COMMAND为进程名称，PID为进程ID，FD：文件描述符，应用程序通过文件描述符识别该文件，<br>TYPE：文件类型，DEVICE：指定磁盘的名称，SIZE：文件的大小，NODE：索引节点（文件在磁盘上的标识），NAME：打开文件的确切名称。<br>根据进程的PID可以使用kill命令将进程干掉，kill -9，-9表示强行杀死进程。在用kill命令杀死进程后，我们可以使用lsof -i:8080重新查找使用8080端口的进程，<br>没找到，说明8080端口进程被杀死，此时，在eclipse中重启Spring Boot的Application就不会出错了。<br>文章作者：Tyan<br>博客：<a href="http://noahsnail.com" target="_blank" rel="external">noahsnail.com</a>  </p>
]]></content>
    
    <summary type="html">
    
      使用Mac开发经常会碰到端口被占用的问题，例如作者在使用Spring Boot开发应用时，在启动Application后，忘了关闭，又重启了一次Application，此时会报错误，而且由于重启Application，导致上一次的启动的Application找不到在哪关闭了，此时需要进入终端去查看8080端口对应的进程id，并根据id关闭对应的应用。
    
    </summary>
    
    
      <category term="Java" scheme="https://ltcxwf-gmail.github.io/tags/Java/"/>
    
      <category term="Mac" scheme="https://ltcxwf-gmail.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java中List与Array的转换</title>
    <link href="https://ltcxwf-gmail.github.io/2016/09/02/2016-9-2-Java%E4%B8%ADList%E4%B8%8EArray%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://ltcxwf-gmail.github.io/2016/09/02/2016-9-2-Java中List与Array的转换/</id>
    <published>2016-09-02T07:46:24.000Z</published>
    <updated>2016-09-07T05:14:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Java项目开发过程中，集合之间的互相转换是非常常见的，其中两个比较典型的转换是List和Array之间的转换，本文主要介绍这二者之间的转换、其中存在的一些问题以及解决方案，本文JDK版本为1.8。  </p>
<h1 id="1-Array-To-List"><a href="#1-Array-To-List" class="headerlink" title="1.Array To List "></a>1.Array To List </h1><p>Array To List在Java中的方法是Arrays.asList()方法，这是在Java开发中常用的方法，在一般情况下使用这个方法将Array转为List都没问题，但要对转换后的List进行修改时会出现下面的异常：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</div><div class="line">   at java.util.AbstractList.add(AbstractList.java:148)</div><div class="line">   at java.util.AbstractList.add(AbstractList.java:108)</div><div class="line">   at com.liu.test.Test.main(Test.java:17)</div></pre></td></tr></table></figure>
<p>测试代码为：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">       String[] str = &#123;&quot;134&quot;, &quot;test&quot;, &quot;list&quot;&#125;;</div><div class="line">       List&lt;String&gt; list = Arrays.asList(str);</div><div class="line">       list.add(&quot;&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么会出现这个错误呢？看一下Arrays.asList()方法的源码及介绍</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns a fixed-size list backed by the specified array.  (Changes to</div><div class="line"> * the returned list "write through" to the array.)  This method acts</div><div class="line"> * as bridge between array-based and collection-based APIs, in</div><div class="line"> * combination with &#123;<span class="doctag">@link</span> Collection#toArray&#125;.  The returned list is</div><div class="line"> * serializable and implements &#123;<span class="doctag">@link</span> RandomAccess&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This method also provides a convenient way to create a fixed-size</div><div class="line"> * list initialized to contain several elements:</div><div class="line"> * &lt;pre&gt;</div><div class="line"> *     List&amp;lt;String&amp;gt; stooges = Arrays.asList("Larry", "Moe", "Curly");</div><div class="line"> * &lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt; the class of the objects in the array</div><div class="line"> * <span class="doctag">@param</span> a the array by which the list will be backed</div><div class="line"> * <span class="doctag">@return</span> a list view of the specified array</div><div class="line"> */</div><div class="line"><span class="meta">@SafeVarargs</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释中第一句话就说了，Arrays.asList()方法返回的是一个固定大小的List，如何来使返回的List可添加或删除元素呢?<br>方案一：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(str));</div></pre></td></tr></table></figure>
<p>方案二：使用Google Guava，需要import Lists：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Lists.newArrayList(str);</div></pre></td></tr></table></figure>
<p>方案三：使用Apache Commons Collections，需要import CollectionUtils：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">CollectionUtils.addAll(list, str);</div></pre></td></tr></table></figure>
<p>上面三种方案根据项目需要自己选择即可。  </p>
<h1 id="2-List-To-Array"><a href="#2-List-To-Array" class="headerlink" title="2.List To Array  "></a>2.List To Array  </h1><p>List To Array在Java中的方法是list.toArray()方法，但这个方法有个问题是返回的数组对象为Object[]，直接用String[]去强制转换会报语法错误，直接点击toArray()方法去查看源码，当然也可以直接看官方API文档:  </p>
<pre><code class="Java"><span class="comment">/**
 * Returns an array containing all of the elements in this list in proper
 * sequence (from first to last element).
 *
 * &lt;p&gt;The returned array will be "safe" in that no references to it are
 * maintained by this list.  (In other words, this method must
 * allocate a new array even if this list is backed by an array).
 * The caller is thus free to modify the returned array.
 *
 * &lt;p&gt;This method acts as bridge between array-based and collection-based
 * APIs.
 *
 * <span class="doctag">@return</span> an array containing all of the elements in this list in proper
 *         sequence
 * <span class="doctag">@see</span> Arrays#asList(Object[])
 */</span>
Object[] toArray();
<span class="comment">/**
 * Returns an array containing all of the elements in this list in
 * proper sequence (from first to last element); the runtime type of
 * the returned array is that of the specified array.  If the list fits
 * in the specified array, it is returned therein.  Otherwise, a new
 * array is allocated with the runtime type of the specified array and
 * the size of this list.
 *
 * &lt;p&gt;If the list fits in the specified array with room to spare (i.e.,
 * the array has more elements than the list), the element in the array
 * immediately following the end of the list is set to &lt;tt&gt;null&lt;/tt&gt;.
 * (This is useful in determining the length of the list &lt;i&gt;only&lt;/i&gt; if
 * the caller knows that the list does not contain any null elements.)
 *
 * &lt;p&gt;Like the {<span class="doctag">@link</span> #toArray()} method, this method acts as bridge between
 * array-based and collection-based APIs.  Further, this method allows
 * precise control over the runtime type of the output array, and may,
 * under certain circumstances, be used to save allocation costs.
 *
 * &lt;p&gt;Suppose &lt;tt&gt;x&lt;/tt&gt; is a list known to contain only strings.
 * The following code can be used to dump the list into a newly
 * allocated array of &lt;tt&gt;String&lt;/tt&gt;:
 *
 * &lt;pre&gt;{<span class="doctag">@code</span>
 *     String[] y = x.toArray(new String[0]);
 * }&lt;/pre&gt;
 *
 * Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to
 * &lt;tt&gt;toArray()&lt;/tt&gt;.
 *
 * <span class="doctag">@param</span> a the array into which the elements of this list are to
 *          be stored, if it is big enough; otherwise, a new array of the
 *          same runtime type is allocated for this purpose.
 * <span class="doctag">@return</span> an array containing the elements of this list
 * <span class="doctag">@throws</span> ArrayStoreException if the runtime type of the specified array
 *         is not a supertype of the runtime type of every element in
 *         this list
 * <span class="doctag">@throws</span> NullPointerException if the specified array is null
 */</span>
&lt;T&gt; T[] toArray(T[] a);
</code></pre>
<p>从源码说明中可以看出，如果想要list.toArray()方法返回指定类型的数组，需要在toArray方法中加上一个数组类型的参数，如果参数数组个数大于list数组则将数组中多余的元素赋为空，如果数组大小不够会重新分配一个指定类型与list大小一致的数组。因此，List To Array可以写成： </p>
<pre><code class="Java">list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);
or
list.toArray(<span class="keyword">new</span> String[list.size()]); <span class="comment">//better</span>
or 
list.stream().toArray(String[]::<span class="keyword">new</span>); <span class="comment">//JDK 1.8</span>
</code></pre>
<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com" target="_blank" rel="external">noahsnail.com</a>  </p>
]]></content>
    
    <summary type="html">
    
      在Java项目开发过程中，集合之间的互相转换是非常常见的，其中两个比较典型的转换是List和Array之间的转换，本文主要介绍这二者之间的转换、其中存在的一些问题以及解决方案，本文JDK版本为1.8。
    
    </summary>
    
    
      <category term="Java" scheme="https://ltcxwf-gmail.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git多用户配置</title>
    <link href="https://ltcxwf-gmail.github.io/2016/08/31/2016-9-1-Git%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
    <id>https://ltcxwf-gmail.github.io/2016/08/31/2016-9-1-Git多用户配置/</id>
    <published>2016-08-31T15:03:22.000Z</published>
    <updated>2016-09-07T05:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在Git使用中经常会碰到多用户问题，例如：你在公司里有一个git账户，在github上有一个账户，并且你想在一台电脑上同时对这两个git账户进行操作，此时就需要进行git多用户配置。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先配置不同的SSH KEY，使用ssh-keygen命令产生两个不同的SSH KEY，进入.ssh目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#切换到.ssh目录</div><div class="line">cd ~/.ssh  </div><div class="line">#使用自己的企业邮箱产生SSH KEY</div><div class="line">ssh-keygen -t rsa -C &quot;mywork@email.com&quot;  </div><div class="line">#企业的可以使用id_rsa，也可以自己起名，例如：id_rsa_work</div><div class="line">Enter file in which to save the key (/Users/ltc/.ssh/id_rsa): id_rsa </div><div class="line">#将ssh key添加到SSH agent中</div><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<p>同理，配置自己的github账户，再有其他账户类似:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#切换到.ssh目录</div><div class="line">cd ~/.ssh  </div><div class="line">#使用自己github的注册邮箱产生SSH KEY</div><div class="line">ssh-keygen -t rsa -C &quot;mygithub@email.com&quot;  </div><div class="line">#github的SSH KEY</div><div class="line">Enter file in which to save the key (/Users/ltc/.ssh/id_rsa): id_rsa_github</div><div class="line">#将ssh key添加到SSH agent中 </div><div class="line">ssh-add ~/.ssh/id_rsa_github</div></pre></td></tr></table></figure></p>
<p>在生成ssh key之后，需要分别在github的profile中和公司git的profile中编辑SSH KEY，以github为例：<br><img src="http://ocs628urt.bkt.clouddn.com/ssh-key.png" alt="image"></p>
<p>在图中添加Title，可以随便写：<br>将.ssh目录下对应的id_rsa_github.pub中的内容拷到Key中，点击Add SSH key按钮即可。公司的git类似。<br>然后在.ssh目录下配置config文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> #切换到.ssh目录</div><div class="line">cd ~/.ssh</div><div class="line">#创建并编辑config文件</div><div class="line">vim config </div><div class="line"># 粘贴到config文件中</div><div class="line">#公司的git地址</div><div class="line">Host git.***.com  </div><div class="line">   User git</div><div class="line">   Hostname git.***.com  #公司的git地址</div><div class="line">   IdentityFile ~/.ssh/id_rsa  #访问公司git的SSH KEY</div><div class="line">   Port   ***  #公司的git端口</div><div class="line"></div><div class="line">Host github.com</div><div class="line">   User git</div><div class="line">   Hostname github.com #github的地址</div><div class="line">   IdentityFile ~/.ssh/id_rsa_github  #访问github的SSH KEY</div></pre></td></tr></table></figure></p>
<p>测试配置是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#github的地址</div><div class="line">ssh -T git@github.com </div><div class="line">#出现如下内容，表示成功链接github，***为你的github账户的用户名</div><div class="line">Hi ***! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div><div class="line">#公司的git地址</div><div class="line">ssh -T git@git.***.com </div><div class="line">#出现如下内容，表示成功链接github，***为公司git账户的用户名</div><div class="line">Hi ***! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>此时，就可以分别访问公司的git和github了。</p>
]]></content>
    
    <summary type="html">
    
      在Git使用中经常会碰到多用户问题，例如：你在公司里有一个git账户，在github上有一个账户，并且你想在一台电脑上同时对这两个git账户进行操作，此时就需要进行git多用户配置。
    
    </summary>
    
    
      <category term="Git" scheme="https://ltcxwf-gmail.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
